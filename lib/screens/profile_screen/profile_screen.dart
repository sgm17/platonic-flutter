import 'package:platonic/domains/http_repository/models/error_app_model.dart';
import 'package:platonic/domains/user_repository/src/models/app_user_model.dart';
import 'package:platonic/providers/error_provider/profile_error_provider.dart';
import 'package:platonic/providers/user_provider/providers.dart';
import 'package:platonic/screens/profile_screen/widgets/widgets.dart';
import 'package:platonic/screens/error_dialog/error_dialog/error_dialog.dart';
import 'package:platonic/screens/error_dialog/loading_dialog/loading_dialog.dart';
import 'package:platonic/screens/home_screen/widgets/widgets.dart';
import 'package:platonic/screens/profile_screen/widgets/back_button_profile.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';

/* Frame profile
    Autogenerated by FlutLab FTF Generator
  */
class ProfileScreen extends ConsumerStatefulWidget {
  const ProfileScreen({super.key});

  @override
  ProfileScreenState createState() => ProfileScreenState();
}

class ProfileScreenState extends ConsumerState<ProfileScreen> {
  bool isLoading = false;

/*   Future<void> toggleUserAvatar(){

  }

  Future<void> loadingDialog(){
    final
  } */

  @override
  Widget build(BuildContext context) {
    final userState = ref.watch(userProvider);
    final profileErrorState = ref.watch(profileErrorProvider);

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (profileErrorState != null) {
        showDialog(
            context: context,
            builder: (context) => ErrorDialog(
                  error: profileErrorState.code,
                ));

        ref.read(profileErrorProvider.notifier).state = null;
      }
    });

    void toggleLoadingDialog() {
      setState(() {
        isLoading = true;
      });

      final dialog = showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const LoadingDialog(loading: 'userloadingdialog'),
      );

      ref.read(userProvider.notifier).updateProfile().whenComplete(() {
        Navigator.of(context).pop(); // Dismiss the dialog
        setState(() {
          isLoading = false;
        });
      });

      dialog.then((_) {});
    }

    Future<bool> onWillPop() async {
      if (isLoading) {
        return false;
      } else {
        toggleLoadingDialog();
        await ref.read(userProvider.notifier).updateProfile();
        return true;
      }
    }

    return Scaffold(
        backgroundColor: const Color.fromARGB(255, 27, 26, 29),
        body: WillPopScope(
          onWillPop: onWillPop,
          child: SafeArea(
            child: userState.when(
              data: (AppUser? user) {
                if (user == null) return const SizedBox.shrink();

                return Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Align(
                          alignment: Alignment.topLeft,
                          child: SizedBox(
                            width: 35.0,
                            height: 35.0,
                            child: BackButtonProfile(
                              toggleLoadingDialog: () async {
                                await onWillPop();
                                Navigator.pop(context);
                              },
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 6.0,
                        ),
                        GestureDetector(
                          child: SizedBox(
                            height: 110.0,
                            child: UserAvatar(
                              profileImage: user.profileImage,
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 11.0,
                        ),
                        SizedBox(
                          height: 25.0,
                          child: NameTitle(
                            name: user.name,
                          ),
                        ),
                        const SizedBox(
                          height: 1.0,
                        ),
                        SizedBox(
                          height: 18.0,
                          child: UniversityTitle(
                            universityName: user.university!.name,
                            universitySimpleName: user.university!.simpleName,
                          ),
                        ),
                        const SizedBox(
                          height: 1.0,
                        ),
                        SizedBox(
                          height: 18.0,
                          child: StudiesTitle(
                            study: user.study!.studyName,
                          ),
                        ),
                        const SizedBox(
                          height: 39.0,
                        ),
                        const Align(
                          alignment: Alignment.topLeft,
                          child: SizedBox(
                            height: 18.0,
                            child: HomeTitle(
                              title: '''Meet Picture''',
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 14.0,
                        ),
                        const Expanded(
                          child: MeetPictureContainer(
                            isOtherUser: false,
                          ),
                        ),
                      ]),
                );
              },
              loading: () => const Center(
                child: CircularProgressIndicator(
                  color: Color.fromARGB(255, 255, 255, 255),
                ),
              ),
              error: (error, stackTrace) {
                return Text(error.toString());
              },
            ),
          ),
        ));
  }
}
