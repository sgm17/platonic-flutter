import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/flat_repository/src/models/models.dart';
import 'package:platonic/domains/http_repository/models/error_app_model.dart';
import 'package:platonic/providers/error_provider/create_flat/step1_error_provider.dart';
import 'package:platonic/providers/flat_provider/providers.dart';
import 'package:platonic/providers/http_provider/providers.dart';
import 'widgets.dart';

/* Rectangle Rectangle 14
    Autogenerated by FlutLab FTF Generator
  */
class CreateFlatDetailSearch extends ConsumerWidget {
  const CreateFlatDetailSearch({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    Future<void> toggleAddressSearch() async {
      final address = ref.read(flatAddressInputProvider);

      if (address.isEmpty) {
        ref.read(step1ErrorProvider.notifier).state =
            const ErrorApp(code: 'step1emptyaddress');
      }

      List<PlaceModel> placeModel = [];

      try {
        placeModel = await ref
            .read(httpViewmodelProvider)
            .getIndexAddress(address: address);
      } on ErrorApp catch (e) {
        ref.read(step1ErrorProvider.notifier).state = e;
      } catch (e) {
        print(e);
      }

      ref.read(suggestionsProvider.notifier).state = placeModel;
    }

    return TextField(
      onChanged: (text) =>
          ref.read(flatAddressInputProvider.notifier).state = text,
      onSubmitted: (_) async => await toggleAddressSearch(),
      focusNode: ref.read(flatAddressInputFocusProvider),
      style: const TextStyle(
          height: 1.1530000141688757,
          fontSize: 14.0,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w300,
          color: Colors.black),
      decoration: InputDecoration(
        prefixIcon: InkWell(
            onTap: toggleAddressSearch,
            child: const CreateFlatDetailSearchIconContainer()),
        hintText: '''Carrer de Gr√†cia, Barcelona''',
        hintStyle: const TextStyle(color: Color.fromARGB(255, 130, 130, 132)),
        counterText: "",
        errorStyle: const TextStyle(fontSize: 0.01),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 10.0,
        ),
        fillColor: const Color.fromARGB(255, 255, 255, 255),
        filled: true,
        enabledBorder: OutlineInputBorder(
          borderSide: BorderSide.none,
          borderRadius: BorderRadius.circular(10.0),
        ),
        focusedBorder: OutlineInputBorder(
          borderSide: BorderSide.none,
          borderRadius: BorderRadius.circular(10.0),
        ),
      ),
    );
  }
}
