import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/http_repository/models/error_app_model.dart';
import 'package:platonic/providers/error_provider/providers.dart';
import 'package:platonic/providers/user_provider/providers.dart';

/* Instance personal_input
    Autogenerated by FlutLab FTF Generator
  */
class PersonalNameInput extends ConsumerWidget {
  const PersonalNameInput({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    String? validateName(String? value) {
      if (value == null || value.isEmpty) {
        ref.read(registerDetailErrorProvider.notifier).state =
            const ErrorApp(code: 'registernamerequireddialog');
        return 'Name is required';
      }
      if (value.length > 10) {
        ref.read(registerDetailErrorProvider.notifier).state =
            const ErrorApp(code: 'registernamelongdialog');

        return 'Name is too long';
      }
      if (!RegExp(r'^[a-zA-Z]+$').hasMatch(value)) {
        ref.read(registerDetailErrorProvider.notifier).state =
            const ErrorApp(code: 'registernameonlylettersdialog');

        return 'Name can only contain letters';
      }
      return null;
    }

    return TextFormField(
      onSaved: (newValue) {
        ref.read(appUserProvider.notifier).setName(newValue!);
      },
      validator: validateName,
      textInputAction: TextInputAction.next,
      textAlignVertical: TextAlignVertical.center,
      maxLength: 10,
      maxLines: null,
      style: const TextStyle(
          height: 1.1530000141688757,
          fontSize: 14.0,
          fontFamily: 'Gilroy',
          fontWeight: FontWeight.w300,
          color: Color.fromARGB(255, 255, 255, 255)),
      decoration: InputDecoration(
        hintText: '''Your name''',
        hintStyle: TextStyle(color: Colors.grey[400]),
        counterText: "",
        errorStyle: const TextStyle(fontSize: 0.01),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 10.0,
        ),
        enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0),
            borderSide: const BorderSide(
                color: Color.fromARGB(255, 43, 45, 46), width: 1.0)),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.0),
          borderSide: const BorderSide(
              color: Color.fromARGB(255, 43, 45, 46), width: 1.0),
        ),
        errorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0),
            borderSide: const BorderSide(color: Colors.red, width: 1.0)),
        focusedErrorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0),
            borderSide: const BorderSide(color: Colors.red, width: 1.0)),
      ),
    );
  }
}
