import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/flat_repository/src/models/models.dart';
import 'package:platonic/helpers/svg/svg.dart';
import 'package:platonic/providers/flat_provider/providers.dart';

import 'widgets.dart';

/* Rectangle container
    Autogenerated by FlutLab FTF Generator
  */
class FeatureItemContainer extends ConsumerWidget {
  final FeatureModel featureModel;

  const FeatureItemContainer({Key? key, required this.featureModel})
      : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final flatCreateState = ref.watch(flatCreateProvider);
    void toggleFeatureItem() {
      final flat = ref.read(flatCreateProvider);

      if (flat.features.contains(featureModel) == true) {
        ref.read(flatCreateProvider.notifier).state = flat.copyWith(
            features: flat.features.where((e) => e != featureModel).toList());
      } else {
        ref.read(flatCreateProvider.notifier).state = flatCreateState
            .copyWith(features: [featureModel, ...flat.features]);
      }
    }

    return GestureDetector(
      onTap: toggleFeatureItem,
      child: AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          padding: const EdgeInsets.symmetric(vertical: 9.0, horizontal: 16.0),
          decoration: BoxDecoration(
            color: flatCreateState.features.contains(featureModel)
                ? const Color.fromARGB(255, 63, 141, 253)
                : null,
            borderRadius: BorderRadius.circular(20.0),
            border: Border.all(
              width: 1.0,
              color: flatCreateState.features.contains(featureModel)
                  ? const Color.fromARGB(255, 63, 141, 253)
                  : const Color.fromARGB(255, 43, 45, 46),
            ),
            boxShadow: [
              const BoxShadow(
                color: Color.fromARGB(63, 0, 0, 0),
                offset: Offset(0.0, 4.0),
                blurRadius: 4.0,
              )
            ],
          ),
          child: Row(
            children: [
              Icon(
                featureModel.icon,
                color: const Color.fromARGB(255, 255, 255, 255),
                size: 20.0,
              ),
              const SizedBox(
                width: 10.0,
              ),
              FeatureItemTitle(title: featureModel.name)
            ],
          )),
    );
  }
}
