import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/flat_repository/src/models/models.dart';
import 'package:platonic/providers/flat_provider/providers.dart';
import 'package:platonic/screens/create_flat_screen/step1_screen/widgets/widgets.dart';
import 'package:platonic/screens/features_list_screen/widgets/features_list_item.dart';
import 'package:flutter/material.dart';

/* Frame features
    Autogenerated by FlutLab FTF Generator
  */
class FeaturesListScreen extends ConsumerWidget {
  const FeaturesListScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final flatState = ref.watch(flatProvider);

    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 27, 26, 29),
      body: SafeArea(
          child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: flatState.when(
          data: (data) => Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(
                height: 25.0,
                child: NavigateBefore(
                  title:
                      AppLocalizations.of(context)!.featuresListNavigatorTitle,
                ),
              ),
              const SizedBox(height: 22.0),
              ListView.builder(
                shrinkWrap: true,
                itemCount: (data.features.length / 3).ceil(),
                itemBuilder: (context, index) {
                  final start = index * 3;
                  var end = start + 3;
                  if (end > data.features.length) {
                    end = data.features.length;
                  }
                  final features = data.features.sublist(start, end);

                  while (features.length < 3) {
                    features.add(FeatureModel.emptyFeature);
                  }

                  return Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      for (final feature in features)
                        Expanded(
                          child: SizedBox(
                            height: 67.0,
                            child: FeaturesListItem(
                              featureModel: feature,
                            ),
                          ),
                        ),
                    ],
                  );
                },
              ),
            ],
          ),
          loading: () => const Center(
            child: CircularProgressIndicator(
              color: Color.fromARGB(255, 255, 255, 255),
            ),
          ),
          error: (error, stackTrace) {
            return Text(error.toString());
          },
        ),
      )),
    );
  }
}
