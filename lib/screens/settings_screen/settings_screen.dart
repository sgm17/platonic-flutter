import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/http_repository/models/error_app_model.dart';
import 'package:platonic/providers/error_provider/providers.dart';
import 'package:platonic/providers/error_provider/settings_error_provider.dart';
import 'package:platonic/providers/user_provider/providers.dart';
import 'package:platonic/screens/auth_screen/widgets/widgets.dart';
import 'package:platonic/screens/error_dialog/error_dialog/error_dialog.dart';
import 'package:platonic/screens/error_dialog/loading_dialog/loading_dialog.dart';
import 'package:platonic/screens/profile_screen/widgets/widgets.dart';
import 'package:platonic/screens/register_detail_screen/widgets/widgets.dart';
import 'package:platonic/screens/settings_screen/widgets/widgets.dart';

/* Frame settings
    Autogenerated by FlutLab FTF Generator
  */
class SettingsScreen extends ConsumerStatefulWidget {
  const SettingsScreen({super.key});

  @override
  SettingsScreenState createState() => SettingsScreenState();
}

class SettingsScreenState extends ConsumerState<SettingsScreen> {
  bool isLoading = false;

  Future<void> updateProfile() async {
    try {
      setState(() {
        isLoading = true;
      });

      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) =>
            const LoadingDialog(loading: 'settingsloadingdialog'),
      );

      await ref.read(appUserProvider.notifier).updateProfile();

      Navigator.of(context).pop();

      setState(() {
        isLoading = false;
      });
    } on ErrorApp catch (e) {
      ref.read(settingsErrorProvider.notifier).state = e;
    } catch (e) {
      print(e);
    }
  }

  Future<bool> onWillPop() async {
    if (isLoading) {
      return false;
    } else {
      await updateProfile();
      return true;
    }
  }

  @override
  Widget build(BuildContext context) {
    final settingsErrorState = ref.read(settingsErrorProvider);

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (settingsErrorState != null) {
        showDialog(
            context: context,
            builder: (context) => ErrorDialog(
                  error: settingsErrorState.code,
                ));

        ref.read(settingsErrorProvider.notifier).state = null;
      }
    });

    return Scaffold(
        backgroundColor: const Color.fromARGB(255, 27, 26, 29),
        body: WillPopScope(
          onWillPop: onWillPop,
          child: SafeArea(
              child: Padding(
            padding: const EdgeInsets.all(16.0),
            child:
                Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              GestureDetector(
                onTap: () async {
                  if (await onWillPop()) {
                    Navigator.of(context).pop();
                  }
                },
                child: Container(
                    width: 35.0,
                    height: 35.0,
                    alignment: Alignment.center,
                    decoration: const BoxDecoration(
                        shape: BoxShape.circle,
                        color: Color.fromARGB(255, 43, 45, 46)),
                    child: const SizedBox(
                      width: 20.0,
                      height: 20.0,
                      child: BackButtonIconContainer(),
                    )),
              ),
              const SizedBox(
                height: 22.0,
              ),
              const SizedBox(
                width: 289.0,
                height: 34.0,
                child: AuthenticationTitleText(
                  title: '''Meet Settings''',
                ),
              ),
              const SizedBox(
                height: 22.0,
              ),
              const SizedBox(
                height: 178.0,
                child: SettingsForm(),
              ),
              const SizedBox(
                height: 22.0,
              ),
              const SizedBox(
                height: 56.0,
                child: MeetDescription(),
              ),
              const SizedBox(
                height: 37.0,
              ),
              const SizedBox(
                height: 38.0,
                child: LogoutButton(),
              ),
            ]),
          )),
        ));
  }
}
