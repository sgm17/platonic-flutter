import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:platonic/domains/meet_settings_repository/src/models/meet_settings_model.dart';
import 'package:platonic/domains/university_repository/src/models/faculties_list_model.dart';
import 'package:platonic/domains/user_repository/user_repository.dart';
import 'package:platonic/providers/dialog_provider/search_bar_provider.dart';
import 'package:platonic/providers/meet_settings_provider/meet_settings_provider.dart';
import 'package:platonic/providers/register_detail_provider/register_detail_provider.dart';
import 'package:platonic/providers/university_provider/universities_provider.dart';
import 'package:platonic/screens/dialog_screen/widgets/widgets.dart';
import 'package:platonic/screens/settings_screen/widgets/widgets.dart';

/* Frame studies_dialog
    Autogenerated by FlutLab FTF Generator
  */
class FacultyDialogScreen extends ConsumerWidget {
  const FacultyDialogScreen({super.key, required this.isMeetSettings});

  final bool isMeetSettings;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final universitiesList = ref.watch(universitiesProvider);
    final searchBarState = ref.watch(searchBarProvider);
    final facultyState = ref
        .watch(isMeetSettings ? meetSettingsProvider : registerDetailProvider);

    List<FacultiesList> facultiesList = [];

    if (isMeetSettings && facultyState is MeetSettings) {
      facultiesList = facultyState.universityToMeet != null
          ? universitiesList
              .firstWhere((e) => e.university == facultyState.universityToMeet)
              .faculties
          : [];
    } else if (!isMeetSettings && facultyState is RegisterDetail) {
      facultiesList = facultyState.university != null
          ? universitiesList
              .firstWhere((e) => e.university == facultyState.university)
              .faculties
          : [];
    }

    facultiesList = searchBarState.trim().isEmpty
        ? facultiesList
        : facultiesList
            .where((faculty) => faculty.facultyName
                .toLowerCase()
                .contains(searchBarState.toLowerCase()))
            .toList();

    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 27, 26, 29),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child:
              Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
            SizedBox(
              height: 31.0,
              child: DialogTitle(
                  title: isMeetSettings
                      ? '''Set faculties to Meet'''
                      : '''Set your faculty'''),
            ),
            const SizedBox(
              height: 20.0,
            ),
            const SizedBox(
              height: 20.0,
              child: SearchBar(
                placeholder: '''Search by faculty''',
              ),
            ),
            const SizedBox(
              height: 32.0,
            ),
            Expanded(
              child: ListView.separated(
                  itemCount: facultiesList.length,
                  itemBuilder: (context, index) {
                    return GestureDetector(
                      onTap: () {
                        if (isMeetSettings && facultyState is MeetSettings) {
                          if (facultyState.facultiesToMeet.contains(
                              facultiesList[index].convertToFaculty())) {
                            ref.read(meetSettingsProvider.notifier).state =
                                facultyState.copyWith(
                                    facultiesToMeet: facultyState
                                        .facultiesToMeet
                                        .where((e) =>
                                            e !=
                                            facultiesList[index]
                                                .convertToFaculty())
                                        .toList());
                          } else {
                            ref.read(meetSettingsProvider.notifier).state =
                                facultyState.copyWith(facultiesToMeet: [
                              ...facultyState.facultiesToMeet,
                              facultiesList[index].convertToFaculty()
                            ]);
                          }
                        } else if (!isMeetSettings &&
                            facultyState is RegisterDetail) {
                          ref.read(registerDetailProvider.notifier).state =
                              facultyState.copyWith(
                                  faculty:
                                      facultiesList[index].convertToFaculty());
                        }
                      },
                      child: SelectFacultyContainer(
                        faculty: facultiesList[index],
                        isSelected: isMeetSettings &&
                                facultyState is MeetSettings
                            ? facultyState.facultiesToMeet.contains(
                                facultiesList[index].convertToFaculty())
                            : !isMeetSettings && facultyState is RegisterDetail
                                ? facultyState.faculty ==
                                    facultiesList[index].convertToFaculty()
                                : false,
                      ),
                    );
                  },
                  separatorBuilder: (context, index) {
                    return const SizedBox(
                      height: 8.0,
                    );
                  }),
            ),
          ]),
        ),
      ),
    );
  }
}
